"use strict";
var fs = require('fs');
var minimist = require('minimist');
var path = require('path');
var os = require('os');
var childProcess = require('child_process');
var http = require('http');
var opts_1 = require('./opts');
var Opt = require('./');
var config_1 = require('../config');
var files_1 = require('../files');
var cli_1 = require('../cli');
var binaries_1 = require('../binaries');
var logger = new cli_1.Logger('start');
var prog = new cli_1.Program()
    .command('start', 'start up the selenium server')
    .action(start)
    .addOption(opts_1.Opts[Opt.OUT_DIR])
    .addOption(opts_1.Opts[Opt.SELENIUM_PORT])
    .addOption(opts_1.Opts[Opt.VERSIONS_STANDALONE])
    .addOption(opts_1.Opts[Opt.VERSIONS_CHROME])
    .addOption(opts_1.Opts[Opt.CHROME_LOGS]);
if (os.type() === 'Windows_NT') {
    prog.addOption(opts_1.Opts[Opt.VERSIONS_IE]);
}
exports.program = prog;
// stand alone runner
var argv = minimist(process.argv.slice(2), prog.getMinimistOptions());
if (argv._[0] === 'start-run') {
    prog.run(JSON.parse(JSON.stringify(argv)));
}
else if (argv._[0] === 'start-help') {
    prog.printHelp();
}
/**
 * Parses the options and starts the selenium standalone server.
 * @param options
 */
function start(options) {
    var osType = os.type();
    var binaries = files_1.FileManager.setupBinaries();
    var seleniumPort = options[Opt.SELENIUM_PORT].getString();
    var outputDir = config_1.Config.getSeleniumDir();
    if (options[Opt.OUT_DIR].getString()) {
        if (path.isAbsolute(options[Opt.OUT_DIR].getString())) {
            outputDir = options[Opt.OUT_DIR].getString();
        }
        else {
            outputDir = path.resolve(config_1.Config.getBaseDir(), options[Opt.OUT_DIR].getString());
        }
    }
    try {
        // check if folder exists
        fs.statSync(outputDir).isDirectory();
    }
    catch (e) {
        // if the folder does not exist, quit early.
        logger.warn('the out_dir path ' + outputDir + ' does not exist, run webdriver-manager update');
        return;
    }
    var chromeLogs = null;
    if (options[Opt.CHROME_LOGS].getString()) {
        if (path.isAbsolute(options[Opt.CHROME_LOGS].getString())) {
            chromeLogs = options[Opt.CHROME_LOGS].getString();
        }
        else {
            chromeLogs = path.resolve(config_1.Config.getBaseDir(), options[Opt.CHROME_LOGS].getString());
        }
    }
    binaries[binaries_1.StandAlone.id].versionCustom = options[Opt.VERSIONS_STANDALONE].getString();
    binaries[binaries_1.ChromeDriver.id].versionCustom = options[Opt.VERSIONS_CHROME].getString();
    if (options[Opt.VERSIONS_IE]) {
        binaries[binaries_1.IEDriver.id].versionCustom = options[Opt.VERSIONS_IE].getString();
    }
    var downloadedBinaries = files_1.FileManager.downloadedBinaries(outputDir);
    if (downloadedBinaries[binaries_1.StandAlone.id] == null) {
        logger.error('Selenium Standalone is not present. Install with ' +
            'webdriver-manager update --standalone');
        process.exit(1);
    }
    var args = ['-jar', path.join(outputDir, binaries[binaries_1.StandAlone.id].filename())];
    if (seleniumPort) {
        args.push('-port', seleniumPort);
    }
    if (downloadedBinaries[binaries_1.ChromeDriver.id] != null) {
        args.push('-Dwebdriver.chrome.driver=' +
            path.join(outputDir, binaries[binaries_1.ChromeDriver.id].executableFilename(osType)));
        if (chromeLogs != null) {
            args.push('-Dwebdriver.chrome.logfile=' + chromeLogs);
        }
    }
    if (downloadedBinaries[binaries_1.IEDriver.id] != null) {
        args.push('-Dwebdriver.ie.driver=' +
            path.join(outputDir, binaries[binaries_1.IEDriver.id].executableFilename(osType)));
    }
    // log the command to launch selenium server
    var argsToString = '';
    for (var arg in args) {
        argsToString += ' ' + args[arg];
    }
    logger.info('java' + argsToString);
    var seleniumProcess = spawnCommand('java', args);
    logger.info('seleniumProcess.pid: ' + seleniumProcess.pid);
    seleniumProcess.on('exit', function (code) {
        logger.info('Selenium Standalone has exited with code ' + code);
        process.exit(code);
    });
    process.stdin.resume();
    process.stdin.on('data', function (chunk) {
        logger.info('Attempting to shut down selenium nicely');
        http.get('http://localhost:4444/selenium-server/driver/?cmd=shutDownSeleniumServer');
    });
    process.on('SIGINT', function () {
        logger.info('Staying alive until the Selenium Standalone process exits');
    });
}
function spawnCommand(command, args) {
    var osType = os.type();
    var windows = osType === 'Windows_NT';
    var winCommand = windows ? 'cmd' : command;
    var finalArgs = windows ? ['/c'].concat([command], args) : args;
    return childProcess.spawn(winCommand, finalArgs, { stdio: 'inherit' });
}
